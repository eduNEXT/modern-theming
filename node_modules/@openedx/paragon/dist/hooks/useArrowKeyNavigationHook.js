// Note: this file was renamed from 'useArrowKeyNavigation.tsx' to 'useArrowKeyNavigationHook.tsx' to fix
// some bugs in the Gatsby www site, where Webpack was getting the .tsx and .mdx
// files confused. Renaming this file allows us to keep the URLs of the docs site
// unchanged.
import { useRef, useEffect } from 'react';
function handleEnter(_ref) {
  let {
    event,
    currentIndex,
    activeElement
  } = _ref;
  if (currentIndex === -1) {
    return;
  }
  activeElement.click();
  event.preventDefault();
}
function handleArrowKey(_ref2) {
  let {
    event,
    currentIndex,
    availableElements
  } = _ref2;
  // If the focus isn't in the container, focus on the first thing
  if (currentIndex === -1) {
    availableElements[0].focus();
  }

  // Move the focus up or down. Wrap around ends of list.
  let nextElement;
  if (event.key === 'ArrowDown' || event.key === 'ArrowRight') {
    nextElement = availableElements[(currentIndex + 1) % availableElements.length];
  }
  if (event.key === 'ArrowUp' || event.key === 'ArrowLeft') {
    nextElement = currentIndex - 1 < 0 ? availableElements[currentIndex - 1 + availableElements.length] : availableElements[currentIndex - 1];
  }
  if (event.key === 'End') {
    nextElement = availableElements[availableElements.length - 1];
  }
  if (event.key === 'Home') {
    [nextElement] = availableElements;
  }
  nextElement?.focus();
  event.preventDefault();
}
/**
 * Implement arrow key navigation for the given parentNode
 */
function handleEvents(_ref3) {
  let {
    event,
    ignoredKeys = [],
    parentNode,
    selectors = 'a,button,input'
  } = _ref3;
  if (!parentNode) {
    return;
  }
  const {
    key
  } = event;
  if (!['ArrowUp', 'ArrowDown', 'ArrowRight', 'ArrowLeft', 'Enter', 'Home', 'End'].includes(key) || ignoredKeys.includes(key)) {
    return;
  }
  const {
    activeElement
  } = document;

  // If we're not inside the container, don't do anything
  if (!parentNode.contains(activeElement)) {
    return;
  }

  // Get the list of elements we're allowed to scroll through
  const availableElements = parentNode.querySelectorAll(selectors);

  // No elements are available to loop through.
  if (!availableElements.length) {
    return;
  }

  // Which index is currently selected
  const currentIndex = Array.from(availableElements).findIndex(availableElement => availableElement === activeElement);
  if (key === 'Enter' && activeElement) {
    handleEnter({
      event,
      currentIndex,
      activeElement: activeElement
    });
  }
  handleArrowKey({
    event,
    currentIndex,
    availableElements
  });
}
/**
 * A React hook to enable arrow key navigation on a component.
 */
export default function useArrowKeyNavigation() {
  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  const {
    selectors,
    ignoredKeys
  } = props;
  const parentNode = useRef();
  useEffect(() => {
    const eventHandler = event => {
      handleEvents({
        event,
        ignoredKeys,
        parentNode: parentNode.current,
        selectors
      });
    };
    document.addEventListener('keydown', eventHandler);
    return () => document.removeEventListener('keydown', eventHandler);
  }, [ignoredKeys, selectors]);
  return parentNode;
}
//# sourceMappingURL=useArrowKeyNavigationHook.js.map
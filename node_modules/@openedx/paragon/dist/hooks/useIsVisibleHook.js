import { useRef, useState, useEffect } from 'react';
const useIsVisible = function () {
  let defaultIsVisible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  const sentinelRef = useRef(null);
  const [isVisible, setIsVisible] = useState(defaultIsVisible);
  useEffect(() => {
    try {
      if (sentinelRef.current) {
        const observer = new IntersectionObserver(entries => {
          entries.forEach(_ref => {
            let {
              isIntersecting
            } = _ref;
            setIsVisible(isIntersecting);
          });
        }, {});
        observer.observe(sentinelRef.current);
        return () => {
          observer.disconnect();
        };
      }
    } catch (e) {
      const isReferenceError = e instanceof ReferenceError;
      if (!isReferenceError) {
        throw e;
      }
      // Do nothing if an intersection observer can't be created.
    }
    return () => {};
  }, []);
  return [isVisible, sentinelRef];
};
export default useIsVisible;
//# sourceMappingURL=useIsVisibleHook.js.map
{"version":3,"file":"index.js","names":["React","useState","PropTypes","classNames","useDropzone","ErrorCode","fromEvent","useIntl","DragError","GenericError","UploadProgress","DefaultContent","messages","getTypesString","isMultipleTypes","formatBytes","Dropzone","_ref","className","accept","minSize","maxSize","validator","errorMessages","progressVariant","inputComponent","onProcessUpload","onUploadProgress","onUploadCancel","props","isMultipleDragged","setIsMultipleDragged","errors","setErrors","progress","setProgress","fileName","setFileName","undefined","controller","setController","intl","uploadError","uploadErrorMsg","invalidSizeLess","invalidSizeLessMsg","invalidSizeMore","invalidSizeMoreMsg","invalidType","invalidTypeMsg","multipleDragged","multipleDraggedMsg","onDragEnter","e","files","length","onDragLeave","onDropRejected","map","error","code","FileTooLarge","formatMessage","size","FileTooSmall","FileInvalidType","count","typeString","unexpectedValidationError","handleProgressUpload","progressEvent","percentValue","Math","round","loaded","total","handleUploadError","processUpload","fileData","newController","AbortController","requestConfig","signal","handleError","onDropAccepted","file","customValidationError","formData","FormData","append","name","handleUploadCancel","abort","getRootProps","getInputProps","isDragActive","isDragReject","multiple","maxFiles","disabled","renderContent","createElement","message","Fragment","errorMsgs","variant","percent","onCancel","defaultProps","Infinity","propTypes","string","objectOf","arrayOf","number","func","isRequired","shape","oneOfType","element","oneOf","elementType","node"],"sources":["../../src/Dropzone/index.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { useDropzone, ErrorCode } from 'react-dropzone';\nimport { fromEvent } from 'file-selector';\nimport { useIntl } from 'react-intl';\n\nimport DragError from './DragError';\nimport GenericError from './GenericError';\nimport UploadProgress from './UploadProgress';\nimport DefaultContent from './DefaultContent';\nimport messages from './messages';\nimport { getTypesString, isMultipleTypes, formatBytes } from './utils';\n\nfunction Dropzone({\n  className, accept, minSize, maxSize, validator,\n  errorMessages, progressVariant, inputComponent,\n  onProcessUpload, onUploadProgress, onUploadCancel,\n  ...props\n}) {\n  const [isMultipleDragged, setIsMultipleDragged] = useState(false);\n  const [errors, setErrors] = useState([]);\n  const [progress, setProgress] = useState(0);\n  const [fileName, setFileName] = useState(undefined);\n  const [controller, setController] = useState(undefined);\n  const intl = useIntl();\n\n  const {\n    uploadError: uploadErrorMsg,\n    invalidSizeLess: invalidSizeLessMsg,\n    invalidSizeMore: invalidSizeMoreMsg,\n    invalidType: invalidTypeMsg,\n    multipleDragged: multipleDraggedMsg,\n  } = errorMessages;\n\n  const onDragEnter = async (e) => {\n    if (errors) {\n      setErrors([]);\n    }\n    const files = await fromEvent(e);\n    if (files && files.length > 1) {\n      setIsMultipleDragged(true);\n    }\n  };\n\n  const onDragLeave = () => {\n    if (isMultipleDragged) {\n      setIsMultipleDragged(false);\n    }\n  };\n\n  const onDropRejected = (files) => {\n    if (!isMultipleDragged) {\n      setErrors(files[0].errors.map(error => {\n        switch (error.code) {\n          case ErrorCode.FileTooLarge:\n            return invalidSizeMoreMsg || intl.formatMessage(messages.invalidSizeMore, { size: formatBytes(maxSize) });\n          case ErrorCode.FileTooSmall:\n            return invalidSizeLessMsg || intl.formatMessage(messages.invalidSizeLess, { size: formatBytes(minSize) });\n          case ErrorCode.FileInvalidType:\n            return invalidTypeMsg || intl.formatMessage(\n              messages.invalidType,\n              { count: isMultipleTypes(accept) ? 2 : 1, typeString: getTypesString(accept) },\n            );\n          default:\n            return intl.formatMessage(messages.unexpectedValidationError);\n        }\n      }));\n    } else {\n      setIsMultipleDragged(false);\n    }\n  };\n\n  const handleProgressUpload = (progressEvent) => {\n    const percentValue = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n    setProgress(percentValue);\n    onUploadProgress(percentValue, progressEvent);\n  };\n\n  const handleUploadError = (error) => {\n    // check if request has been canceled before treating the exception as an upload error\n    if (error.code !== 'ERR_CANCELED') {\n      setProgress(0);\n      setErrors([uploadErrorMsg || intl.formatMessage(messages.uploadError)]);\n    }\n  };\n\n  const processUpload = (fileData) => {\n    const newController = new AbortController();\n    setController(newController);\n\n    const requestConfig = {\n      onUploadProgress: handleProgressUpload,\n      signal: newController.signal,\n    };\n\n    onProcessUpload({\n      fileData,\n      requestConfig,\n      handleError: handleUploadError,\n    });\n  };\n\n  const onDropAccepted = async (files) => {\n    const file = files[0];\n    if (validator) {\n      const customValidationError = await validator(file);\n      if (customValidationError) {\n        setErrors([customValidationError]);\n        return;\n      }\n    }\n\n    if (errors) {\n      setErrors([]);\n    }\n\n    const formData = new FormData();\n    formData.append('file', file);\n    setFileName(file.name);\n\n    processUpload(formData);\n  };\n\n  const handleUploadCancel = () => {\n    controller.abort();\n    setProgress(0);\n    onUploadCancel();\n  };\n\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive,\n    isDragReject,\n  } = useDropzone({\n    multiple: false,\n    maxFiles: 1,\n    maxSize,\n    minSize,\n    onDragLeave,\n    onDragEnter,\n    onDropRejected,\n    onDropAccepted,\n    accept,\n    disabled: progress && progress !== 100,\n  });\n\n  const renderContent = () => {\n    if (isMultipleDragged) {\n      return <DragError message={multipleDraggedMsg || intl.formatMessage(messages.multipleDragged)} />;\n    }\n\n    if (errors.length > 0) {\n      return (\n        <>\n          <GenericError errorMsgs={errors} />\n          {inputComponent || <DefaultContent minSize={minSize} maxSize={maxSize} accept={accept} />}\n        </>\n      );\n    }\n\n    if (progress && progress !== 100) {\n      return (\n        <UploadProgress\n          variant={progressVariant}\n          percent={progress}\n          name={fileName}\n          onCancel={handleUploadCancel}\n        />\n      );\n    }\n\n    return inputComponent || <DefaultContent minSize={minSize} maxSize={maxSize} accept={accept} />;\n  };\n\n  return (\n    <div\n      data-testid=\"dropzone-container\"\n      {...getRootProps({\n        className: classNames('pgn__dropzone', className, {\n          'pgn__dropzone-validation-error': isMultipleDragged || errors.length > 0 || isDragReject,\n          'pgn__dropzone-active': isDragActive && !isDragReject,\n        }),\n      })}\n      {...props}\n    >\n      <input {...getInputProps()} />\n      <div className=\"d-flex flex-column justify-content-around align-items-center w-100\">\n        {renderContent()}\n      </div>\n    </div>\n  );\n}\n\nDropzone.defaultProps = {\n  className: undefined,\n  accept: undefined,\n  maxSize: Infinity,\n  minSize: 0,\n  onUploadProgress: () => {},\n  onUploadCancel: () => {},\n  errorMessages: {\n    invalidType: undefined,\n    invalidSizeLess: undefined,\n    invalidSizeMore: undefined,\n    multipleDragged: undefined,\n    uploadError: undefined,\n  },\n  progressVariant: 'spinner',\n  validator: undefined,\n  inputComponent: undefined,\n};\n\nDropzone.propTypes = {\n  /** Specifies class name to append to the base element. */\n  className: PropTypes.string,\n  /**\n   * Set accepted file types.\n   * This should be an object with the keys set to the\n   * [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types)\n   * and the values to an array of file extensions.\n   */\n  accept: PropTypes.objectOf(PropTypes.arrayOf(PropTypes.string)),\n  /** Maximum file size (in bytes). */\n  maxSize: PropTypes.number,\n  /** Minimum file size (in bytes). */\n  minSize: PropTypes.number,\n  /**\n   * A callback fired each time an upload progress event happens,\n   * receives (percentageUploaded, progressEvent) as arguments.\n   */\n  onUploadProgress: PropTypes.func,\n  /** A callback fired upon successful upload, receives Response object as a single argument. */\n  onUploadCancel: PropTypes.func,\n  /**\n   * A function responsible for uploading the file.\n   * Receives following object as its only argument\n   * {\n   *   @param {object} fileData - Metadata about the uploaded file.\n   *   @param {object} requestConfig - Config to pass to `axios` call.\n   *   @param {function} handleError - Function to communicate to `Dropzone` that file upload resulted in failure,\n   *   expects `Error` object to be passed as its only argument.\n   * }\n   */\n  onProcessUpload: PropTypes.func.isRequired,\n  /**\n   * An object containing error messages, following are supported:\n   * 1) invalidType - A message to display when file of invalid type is dropped into `Dropzone`.\n   * Defaults to 'The file type must be {filType} file / one of {fileTypes} files.'.\n   * 2) invalidSizeLess - A message to display when file of size less than minSize value is dropped into `Dropzone`.\n   * Defaults to 'File must be larger than {minSize}.'.\n   * 3) invalidSizeMore - A message to display when file of size greater than maxSize value is dropped into `Dropzone`.\n   * Defaults to 'File must be less than {maxSize}.'.\n   * 4) multipleDragged - A message to display when multiple files are dragged over `Dropzone`.\n   * 5) uploadError - A message to display in case upload results in an error\n   */\n  errorMessages: PropTypes.shape({\n    invalidType: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    invalidSizeLess: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    invalidSizeMore: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    multipleDragged: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    uploadError: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  }),\n  /** Specifies how the upload progress should be displayed, component shows either spinner or a progress bar. */\n  progressVariant: PropTypes.oneOf(['spinner', 'bar']),\n  /**\n   * Custom validation function, receives `File` object as its only argument.\n   * Note that this function will be invoked as a last validation step before beginning an upload process.\n   */\n  validator: PropTypes.func,\n  /** A component to display initial state of the `Dropzone`. */\n  inputComponent: PropTypes.oneOfType([PropTypes.elementType, PropTypes.node]),\n};\n\nexport default Dropzone;\n"],"mappings":"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","ignoreList":[]}
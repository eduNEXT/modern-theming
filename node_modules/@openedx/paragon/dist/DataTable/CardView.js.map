{"version":3,"file":"CardView.js","names":["React","useContext","PropTypes","classNames","v4","uuidv4","DataTableContext","useRows","selectColumn","Card","CardGrid","CardItem","_ref","row","prepareRow","isSelectable","SelectionComponent","CardComponent","selectionPlacement","isSelected","createElement","className","DefaultSkeletonCardComponent","isLoading","ImageCap","logoSkeleton","Section","Footer","DEFAULT_SKELETON_CARD_COUNT","CardView","_ref2","columnSizes","SkeletonCardComponent","skeletonCardCount","getTableProps","displayRows","manualSelectColumn","Cell","Array","map","key","id","defaultProps","undefined","propTypes","shape","getToggleRowSelectedProps","func","bool","isRequired","oneOf","xs","lg","xl","string","number","sm","md"],"sources":["../../src/DataTable/CardView.jsx"],"sourcesContent":["import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { v4 as uuidv4 } from 'uuid';\nimport DataTableContext from './DataTableContext';\nimport { useRows } from './hooks';\nimport { selectColumn } from './utils/getVisibleColumns';\nimport Card, { CardGrid } from '../Card';\n\nfunction CardItem({\n  row,\n  prepareRow,\n  isSelectable,\n  SelectionComponent,\n  CardComponent,\n  selectionPlacement,\n}) {\n  prepareRow(row);\n  const { isSelected } = row;\n\n  if (isSelectable && SelectionComponent) {\n    return (\n      <div className={classNames(\n        'pgn__data-table__selectable-card',\n        {\n          'is-selected': isSelected,\n          'selection-right': selectionPlacement === 'right',\n          'selection-left': selectionPlacement !== 'right',\n        },\n      )}\n      >\n        <CardComponent {...row} />\n        <SelectionComponent row={row} />\n      </div>\n    );\n  }\n\n  return <CardComponent {...row} />;\n}\n\nfunction DefaultSkeletonCardComponent() {\n  return (\n    <Card isLoading data-testid=\"default-skeleton-card-component\">\n      <Card.ImageCap logoSkeleton />\n      <Card.Section className=\"pgn__data-table-card-view-default-skeleton-card-section\" />\n      <Card.Footer />\n    </Card>\n  );\n}\n\nexport const DEFAULT_SKELETON_CARD_COUNT = 8;\n\nfunction CardView({\n  columnSizes,\n  CardComponent,\n  className,\n  selectionPlacement,\n  SkeletonCardComponent = DefaultSkeletonCardComponent,\n  skeletonCardCount,\n}) {\n  const {\n    getTableProps, prepareRow, displayRows,\n  } = useRows();\n  const {\n    isSelectable,\n    manualSelectColumn,\n    isLoading,\n  } = useContext(DataTableContext);\n\n  // use the same component for card selection that is used for row selection\n  // otherwise view switching might break if row selection uses component that supports backend filtering / sorting\n  const SelectionComponent = manualSelectColumn?.Cell || selectColumn.Cell;\n\n  if (!getTableProps) {\n    return null;\n  }\n\n  if (isLoading) {\n    return (\n      <CardGrid\n        className={classNames('pgn__data-table-card-view', className)}\n        columnSizes={columnSizes}\n      >\n        {[...new Array(skeletonCardCount)].map(() => <SkeletonCardComponent key={uuidv4()} />)}\n      </CardGrid>\n    );\n  }\n\n  return (\n    <CardGrid\n      className={classNames('pgn__data-table-card-view', className)}\n      columnSizes={columnSizes}\n    >\n      {displayRows.map((row) => (\n        <CardItem\n          key={row.id}\n          CardComponent={CardComponent}\n          SelectionComponent={SelectionComponent}\n          isSelectable={isSelectable}\n          row={row}\n          prepareRow={prepareRow}\n          selectionPlacement={selectionPlacement}\n        />\n      ))}\n    </CardGrid>\n  );\n}\n\nCardItem.defaultProps = {\n  SelectionComponent: undefined,\n};\n\nCardItem.propTypes = {\n  row: PropTypes.shape({\n    getToggleRowSelectedProps: PropTypes.func,\n    isSelected: PropTypes.bool,\n  }).isRequired,\n  prepareRow: PropTypes.func.isRequired,\n  isSelectable: PropTypes.bool.isRequired,\n  CardComponent: PropTypes.func.isRequired,\n  SelectionComponent: PropTypes.func,\n  selectionPlacement: PropTypes.oneOf(['right', 'left']).isRequired,\n};\n\nCardView.defaultProps = {\n  columnSizes: {\n    xs: 12,\n    lg: 6,\n    xl: 4,\n  },\n  className: undefined,\n  selectionPlacement: 'right',\n  SkeletonCardComponent: undefined,\n  skeletonCardCount: 8,\n};\n\nCardView.propTypes = {\n  /** The class name for the CardGrid component */\n  className: PropTypes.string,\n  /**\n   * An object containing the desired column size at each breakpoint, following a similar\n   * props API as ``react-bootstrap/Col``\n   */\n  columnSizes: PropTypes.shape({\n    xs: PropTypes.number,\n    sm: PropTypes.number,\n    md: PropTypes.number,\n    lg: PropTypes.number,\n    xl: PropTypes.number,\n  }),\n  /** Your card component must be individualized to your table.\n   * It will be called with props from the \"row\" of data it will display */\n  CardComponent: PropTypes.func.isRequired,\n  /** If the Cards are selectable this prop determines from which side of the Card to show selection component. */\n  selectionPlacement: PropTypes.oneOf(['left', 'right']),\n  /** Overrides default skeleton card component for loading state in CardView */\n  SkeletonCardComponent: PropTypes.func,\n  /** Customize the number of loading skeleton cards to display in CardView */\n  skeletonCardCount: PropTypes.number,\n};\n\nexport default CardView;\n"],"mappings":"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","ignoreList":[]}
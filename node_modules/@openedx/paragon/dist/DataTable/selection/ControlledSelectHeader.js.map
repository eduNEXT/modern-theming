{"version":3,"file":"ControlledSelectHeader.js","names":["React","useContext","useMemo","useCallback","PropTypes","CheckboxControl","DataTableContext","clearPageSelectionAction","setSelectedRowsAction","ControlledSelectHeader","_ref","rows","itemCount","controlledTableSelections","dispatch","getToggleAllPageRowsSelectedProps","state","selectedRowIds","isAllPageRowsSelected","selectedPageRowIds","Object","keys","toggleAllPageRowsSelected","toggleAllPageRowsSelectedProps","isIndeterminate","indeterminate","createElement","className","onChange","propTypes","arrayOf","shape","id","oneOfType","string","number","isRequired"],"sources":["../../../src/DataTable/selection/ControlledSelectHeader.jsx"],"sourcesContent":["import React, { useContext, useMemo, useCallback } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { CheckboxControl } from '../../Form';\nimport DataTableContext from '../DataTableContext';\n\nimport {\n  clearPageSelectionAction,\n  setSelectedRowsAction,\n} from './data/actions';\n\nfunction ControlledSelectHeader({ rows }) {\n  const {\n    itemCount,\n    controlledTableSelections: [, dispatch],\n    getToggleAllPageRowsSelectedProps,\n    state: { selectedRowIds },\n    isAllPageRowsSelected,\n  } = useContext(DataTableContext);\n\n  const selectedPageRowIds = useMemo(\n    () => Object.keys(selectedRowIds),\n    [selectedRowIds],\n  );\n\n  const toggleAllPageRowsSelected = useCallback(\n    () => {\n      if (isAllPageRowsSelected) {\n        dispatch(clearPageSelectionAction(selectedPageRowIds));\n      } else {\n        dispatch(setSelectedRowsAction(rows, itemCount));\n      }\n    },\n    [rows, selectedPageRowIds, isAllPageRowsSelected, dispatch, itemCount],\n  );\n\n  const toggleAllPageRowsSelectedProps = getToggleAllPageRowsSelectedProps();\n  toggleAllPageRowsSelectedProps.isIndeterminate = toggleAllPageRowsSelectedProps.indeterminate;\n  // delete unused ``indeterminate`` prop\n  delete toggleAllPageRowsSelectedProps.indeterminate;\n\n  return (\n    <div className=\"pgn__data-table__controlled-select\">\n      <CheckboxControl\n        {...toggleAllPageRowsSelectedProps}\n        onChange={toggleAllPageRowsSelected}\n      />\n    </div>\n  );\n}\n\nControlledSelectHeader.propTypes = {\n  rows: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  })).isRequired,\n};\n\nexport default ControlledSelectHeader;\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,OAAO,EAAEC,WAAW,QAAQ,OAAO;AAC/D,OAAOC,SAAS,MAAM,YAAY;AAElC,SAASC,eAAe,QAAQ,YAAY;AAC5C,OAAOC,gBAAgB,MAAM,qBAAqB;AAElD,SACEC,wBAAwB,EACxBC,qBAAqB,QAChB,gBAAgB;AAEvB,SAASC,sBAAsBA,CAAAC,IAAA,EAAW;EAAA,IAAV;IAAEC;EAAK,CAAC,GAAAD,IAAA;EACtC,MAAM;IACJE,SAAS;IACTC,yBAAyB,EAAE,GAAGC,QAAQ,CAAC;IACvCC,iCAAiC;IACjCC,KAAK,EAAE;MAAEC;IAAe,CAAC;IACzBC;EACF,CAAC,GAAGjB,UAAU,CAACK,gBAAgB,CAAC;EAEhC,MAAMa,kBAAkB,GAAGjB,OAAO,CAChC,MAAMkB,MAAM,CAACC,IAAI,CAACJ,cAAc,CAAC,EACjC,CAACA,cAAc,CACjB,CAAC;EAED,MAAMK,yBAAyB,GAAGnB,WAAW,CAC3C,MAAM;IACJ,IAAIe,qBAAqB,EAAE;MACzBJ,QAAQ,CAACP,wBAAwB,CAACY,kBAAkB,CAAC,CAAC;IACxD,CAAC,MAAM;MACLL,QAAQ,CAACN,qBAAqB,CAACG,IAAI,EAAEC,SAAS,CAAC,CAAC;IAClD;EACF,CAAC,EACD,CAACD,IAAI,EAAEQ,kBAAkB,EAAED,qBAAqB,EAAEJ,QAAQ,EAAEF,SAAS,CACvE,CAAC;EAED,MAAMW,8BAA8B,GAAGR,iCAAiC,CAAC,CAAC;EAC1EQ,8BAA8B,CAACC,eAAe,GAAGD,8BAA8B,CAACE,aAAa;EAC7F;EACA,OAAOF,8BAA8B,CAACE,aAAa;EAEnD,oBACEzB,KAAA,CAAA0B,aAAA;IAAKC,SAAS,EAAC;EAAoC,gBACjD3B,KAAA,CAAA0B,aAAA,CAACrB,eAAe;IAAA,GACVkB,8BAA8B;IAClCK,QAAQ,EAAEN;EAA0B,CACrC,CACE,CAAC;AAEV;AAEAb,sBAAsB,CAACoB,SAAS,GAAG;EACjClB,IAAI,EAAEP,SAAS,CAAC0B,OAAO,CAAC1B,SAAS,CAAC2B,KAAK,CAAC;IACtCC,EAAE,EAAE5B,SAAS,CAAC6B,SAAS,CAAC,CAAC7B,SAAS,CAAC8B,MAAM,EAAE9B,SAAS,CAAC+B,MAAM,CAAC,CAAC,CAACC;EAChE,CAAC,CAAC,CAAC,CAACA;AACN,CAAC;AAED,eAAe3B,sBAAsB","ignoreList":[]}
{"version":3,"file":"index.js","names":["React","PropTypes","classNames","BaseButton","BaseButtonGroup","BaseButtonToolbar","Icon","Button","forwardRef","_ref","ref","children","iconAfter","iconBefore","size","props","createElement","className","src","propTypes","string","disabled","bool","node","isRequired","onClick","func","onKeyDown","type","variant","elementType","defaultProps","undefined","ButtonGroup","_ref2","as","role","oneOf","toggle","vertical","bsPrefix","ButtonToolbar"],"sources":["../../src/Button/index.tsx"],"sourcesContent":["import React from 'react';\nimport PropTypes, { type Requireable } from 'prop-types';\nimport classNames from 'classnames';\nimport BaseButton, { type ButtonProps as BaseButtonProps } from 'react-bootstrap/Button';\nimport BaseButtonGroup, { type ButtonGroupProps as BaseButtonGroupProps } from 'react-bootstrap/ButtonGroup';\nimport BaseButtonToolbar, { type ButtonToolbarProps } from 'react-bootstrap/ButtonToolbar';\nimport type { ComponentWithAsProp } from '../utils/types/bootstrap';\n\nimport Icon from '../Icon';\n\ninterface ButtonProps extends Omit<BaseButtonProps, 'size'> {\n  /**\n   * An icon component to render. Example:\n   * ```\n   * import { Close } from '@openedx/paragon/icons';\n   * <Button iconBefore={Close}>Close</Button>\n   * ```\n   */\n  iconBefore?: React.ComponentType;\n  /**\n   * An icon component to render. Example:\n   * ```\n   * import { Close } from '@openedx/paragon/icons';\n   * <Button iconAfter={Close}>Close</Button>\n   * ```\n   */\n  iconAfter?: React.ComponentType;\n  size?: 'sm' | 'md' | 'lg' | 'inline';\n}\n\ntype ButtonType = ComponentWithAsProp<'button', ButtonProps> & { Deprecated?: any };\n\nconst Button: ButtonType = React.forwardRef<HTMLButtonElement, ButtonProps>(({\n  children,\n  iconAfter,\n  iconBefore,\n  size,\n  ...props\n}, ref) => (\n  <BaseButton\n    size={size as 'sm' | 'lg' | undefined} // Bootstrap's <Button> types do not allow 'md' or 'inline', but we do.\n    {...props}\n    className={classNames(props.className)}\n    ref={ref}\n  >\n    {iconBefore && <Icon className=\"btn-icon-before\" size={size} src={iconBefore} />}\n    {children}\n    {iconAfter && <Icon className=\"btn-icon-after\" size={size} src={iconAfter} />}\n  </BaseButton>\n));\n\nButton.propTypes = {\n  /** Specifies class name to apply to the button */\n  className: PropTypes.string,\n  /** Disables the Button, preventing mouse events, even if the underlying component is an `<a>` element */\n  disabled: PropTypes.bool,\n  /** Specifies the text that is displayed within the button. */\n  children: PropTypes.node.isRequired,\n  /** A function that would specify what the button should do when the `onClick` event is triggered.\n   * For example, the button could launch a `Modal`. The default is an empty function. */\n  onClick: PropTypes.func,\n  /** A function that would specify what the button should do when the `onKeyDown` event is triggered.\n   * For example, this could handle using the `Escape` key to trigger the button's action.\n   * The default is an empty function. */\n  onKeyDown: PropTypes.func,\n  /** Used to set the `type` attribute on the `button` tag.  The default type is `button`. */\n  type: PropTypes.string,\n  /** Specifies variant to use.\n   * Can be on of the base variants: `primary`, `secondary`, `success`, `danger`, `warning`, `info`, `dark`,\n   * `light`, `link`\n   *\n   * as well as one of the customized variants (= base variant prefixed with `inverse-`, `outline-`\n   * or `inverse-outline-`)\n   * */\n  variant: PropTypes.string,\n  /** An icon component to render.\n  * Example import of a Paragon icon component: `import { Check } from '@openedx/paragon/icons';` */\n  iconBefore: PropTypes.elementType as Requireable<React.ComponentType>,\n  /** An icon component to render.\n  * Example import of a Paragon icon component: `import { Check } from '@openedx/paragon/icons';` */\n  iconAfter: PropTypes.elementType as Requireable<React.ComponentType>,\n  // The 'as' type casting above is required for TypeScript checking, because the 'PropTypes.elementType' type normally\n  // allows strings as a value (for use cases like 'div') but we don't support that for <Icon />/iconBefore/iconAfter.\n  // The React TypeScript type definitions are more specific (React.ComponentType vs React.ElementType).\n};\n\nButton.defaultProps = {\n  ...Button.defaultProps,\n  children: undefined,\n  className: undefined,\n  iconBefore: undefined,\n  iconAfter: undefined,\n  disabled: false,\n};\n\n// We could just re-export 'ButtonGroup' and 'ButtonToolbar', but we currently\n// override them to add propTypes validation at runtime, since most Paragon\n// consumers aren't using TypeScript yet. We also force ButtonGroup's 'size'\n// prop to accept our custom values of 'md' and 'inline' which are used in\n// Paragon but not used in the base Bootstrap classes.\n\ninterface ButtonGroupProps extends Omit<BaseButtonGroupProps, 'size'> {\n  size?: 'sm' | 'md' | 'lg' | 'inline';\n}\n\nconst ButtonGroup: ComponentWithAsProp<'div', ButtonGroupProps> = (\n  React.forwardRef<HTMLButtonElement, ButtonGroupProps>(({ size, ...props }, ref) => (\n    <BaseButtonGroup size={size as 'sm' | 'lg'} {...props} ref={ref} />\n  ))\n);\n\nButtonGroup.propTypes = {\n  /** Specifies element type for this component. */\n  as: PropTypes.elementType,\n  /** An ARIA role describing the button group. */\n  role: PropTypes.string,\n  /** Specifies the size for all Buttons in the group. */\n  size: PropTypes.oneOf(['sm', 'md', 'lg', 'inline']),\n  /** Display as a button toggle group. */\n  toggle: PropTypes.bool,\n  /** Specifies if the set of Buttons should appear vertically stacked. */\n  vertical: PropTypes.bool,\n  /** Overrides underlying component base CSS class name */\n  bsPrefix: PropTypes.string,\n};\n\nButtonGroup.defaultProps = {\n  as: 'div',\n  role: 'group',\n  toggle: false,\n  vertical: false,\n  bsPrefix: 'btn-group',\n  size: 'md',\n};\n\nconst ButtonToolbar: ComponentWithAsProp<'div', ButtonToolbarProps> = (\n  React.forwardRef<HTMLButtonElement, ButtonToolbarProps>((props, ref) => (\n    <BaseButtonToolbar {...props} ref={ref} />\n  ))\n);\n\nButtonToolbar.propTypes = {\n  /** An ARIA role describing the button group. */\n  role: PropTypes.string,\n  /** Overrides underlying component base CSS class name */\n  bsPrefix: PropTypes.string,\n};\n\nButtonToolbar.defaultProps = {\n  role: 'toolbar',\n  bsPrefix: 'btn-toolbar',\n};\n\nexport default Button;\nexport { ButtonGroup, ButtonToolbar };\n"],"mappings":"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","ignoreList":[]}
import React from 'react';
import PropTypes from 'prop-types';
import { FORM_CONTROL_SIZES } from './constants';
interface Props<As extends React.ElementType> {
    /** Specifies contents of the component. */
    children: React.ReactNode;
    /** Specifies class name to append to the base element. */
    className?: string;
    /** Specifies base element for the component. */
    as?: As;
    /** Specifies id to use in the group, it will be used as `htmlFor` in `FormLabel` and as `id` in input components.
     *  Will be autogenerated if none is supplied. */
    controlId?: string;
    /** Specifies whether to display components in invalid state, this affects styling. */
    isInvalid?: boolean;
    /** Specifies whether to display components in valid state, this affects styling. */
    isValid?: boolean;
    /** Specifies size for the component. */
    size?: typeof FORM_CONTROL_SIZES.SMALL | typeof FORM_CONTROL_SIZES.LARGE;
}
declare function FormGroup<As extends React.ElementType = 'div'>({ children, controlId, isInvalid, isValid, size, as, ...props }: Props<As> & React.ComponentPropsWithoutRef<As>): React.ReactElement<any, string | React.JSXElementConstructor<any>>;
declare namespace FormGroup {
    var propTypes: {
        /** Specifies contents of the component. */
        children: PropTypes.Validator<NonNullable<PropTypes.ReactNodeLike>>;
        /** Specifies class name to append to the base element. */
        className: PropTypes.Requireable<string>;
        /** Specifies base element for the component. */
        as: PropTypes.Requireable<PropTypes.ReactComponentLike>;
        /** Specifies id to use in the group, it will be used as `htmlFor` in `FormLabel` and as `id` in input components.
         *  Will be autogenerated if none is supplied. */
        controlId: PropTypes.Requireable<string>;
        /** Specifies whether to display components in invalid state, this affects styling. */
        isInvalid: PropTypes.Requireable<boolean>;
        /** Specifies whether to display components in valid state, this affects styling. */
        isValid: PropTypes.Requireable<boolean>;
        /** Specifies size for the component. */
        size: PropTypes.Requireable<string>;
    };
}
export default FormGroup;

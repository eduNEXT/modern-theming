{"version":3,"file":"FormGroupContext.js","names":["React","useState","useEffect","useMemo","useCallback","classNames","newId","useIdList","omitUndefinedProperties","identityFn","props","noop","FormGroupContext","createContext","getControlProps","useSetIsControlGroupEffect","getLabelProps","getDescriptorProps","hasFormGroupProvider","useFormGroupContext","useContext","useStateEffect","initialState","state","setState","useSetStateEffect","newState","FormGroupContextProvider","_ref","children","controlId","explicitControlId","isInvalid","isValid","size","describedByIds","registerDescriptorId","labelledByIds","registerLabelerId","isControlGroup","controlProps","labelledByIdsForControl","undefined","id","labelProps","htmlFor","descriptorProps","contextValue","createElement","Provider","value"],"sources":["../../src/Form/FormGroupContext.tsx"],"sourcesContent":["import React, {\n  useState, useEffect, useMemo, useCallback,\n} from 'react';\nimport classNames from 'classnames';\nimport { newId } from '../utils';\nimport { useIdList, omitUndefinedProperties } from './fieldUtils';\nimport { FORM_CONTROL_SIZES } from './constants';\n\nconst identityFn = (props: Record<string, any>) => props;\nconst noop = () => {};\n\ninterface FormGroupContextData {\n  getControlProps: (props: Record<string, any>) => Record<string, any>;\n  getLabelProps: (props: React.ComponentPropsWithoutRef<'label'>) => React.ComponentPropsWithoutRef<'label'>;\n  getDescriptorProps: (props: Record<string, any>) => Record<string, any>;\n  useSetIsControlGroupEffect: (isControlGroup: boolean) => void;\n  isControlGroup?: boolean;\n  controlId?: string;\n  isInvalid?: boolean;\n  isValid?: boolean;\n  size?: string;\n  hasFormGroupProvider?: boolean;\n}\n\nconst FormGroupContext = React.createContext<FormGroupContextData>({\n  getControlProps: identityFn,\n  useSetIsControlGroupEffect: noop,\n  getLabelProps: identityFn,\n  getDescriptorProps: identityFn,\n  hasFormGroupProvider: false,\n});\n\nconst useFormGroupContext = () => React.useContext(FormGroupContext);\n\nfunction useStateEffect<ValueType extends any>(\n  initialState: ValueType,\n): [value: ValueType, setter: (v: ValueType) => void] {\n  const [state, setState] = useState(initialState);\n  const useSetStateEffect = (newState: ValueType) => {\n    useEffect(() => setState(newState), [newState]);\n  };\n  return [state, useSetStateEffect];\n}\n\nfunction FormGroupContextProvider({\n  children,\n  controlId: explicitControlId,\n  isInvalid,\n  isValid,\n  size,\n}: {\n  children: React.ReactNode;\n  controlId?: string;\n  isInvalid?: boolean;\n  isValid?: boolean;\n  size?: typeof FORM_CONTROL_SIZES.SMALL | typeof FORM_CONTROL_SIZES.LARGE;\n}) {\n  const controlId = useMemo(() => explicitControlId || newId('form-field'), [explicitControlId]);\n  const [describedByIds, registerDescriptorId] = useIdList(controlId);\n  const [labelledByIds, registerLabelerId] = useIdList(controlId);\n  const [isControlGroup, useSetIsControlGroupEffect] = useStateEffect(false);\n\n  const getControlProps = useCallback((controlProps: Record<string, any>) => {\n    // labelledByIds from the list above should only be added to a control\n    // if it the control is a group. We prefer adding a condition here because:\n    //    - Hooks cannot be called inside conditionals\n    //    - The getLabelProps function below is forced to generate an id\n    //      whether it is needed or not.\n    //    - This is what allows consumers of Paragon to use <Form.Label>\n    //      interchangeably between ControlGroup type controls and regular Controls\n    const labelledByIdsForControl = isControlGroup ? labelledByIds : undefined;\n    return omitUndefinedProperties({\n      ...controlProps,\n      'aria-describedby': classNames(controlProps['aria-describedby'], describedByIds) || undefined,\n      'aria-labelledby': classNames(controlProps['aria-labelledby'], labelledByIdsForControl) || undefined,\n      id: controlId,\n    });\n  }, [\n    isControlGroup,\n    describedByIds,\n    labelledByIds,\n    controlId,\n  ]);\n\n  const getLabelProps = (labelProps: React.ComponentPropsWithoutRef<'label'>) => {\n    const id = registerLabelerId(labelProps?.id);\n    if (isControlGroup) {\n      return { ...labelProps, id };\n    }\n    return { ...labelProps, htmlFor: controlId };\n  };\n\n  const getDescriptorProps = (descriptorProps: Record<string, any>) => {\n    const id = registerDescriptorId(descriptorProps?.id);\n    return { ...descriptorProps, id };\n  };\n\n  const contextValue: FormGroupContextData = {\n    getControlProps,\n    getLabelProps,\n    getDescriptorProps,\n    useSetIsControlGroupEffect,\n    isControlGroup,\n    controlId,\n    isInvalid,\n    isValid,\n    size,\n    hasFormGroupProvider: true,\n  };\n\n  return (\n    <FormGroupContext.Provider value={contextValue}>\n      {children}\n    </FormGroupContext.Provider>\n  );\n}\n\nexport {\n  FormGroupContext,\n  FormGroupContextProvider,\n  useFormGroupContext,\n};\n"],"mappings":"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","ignoreList":[]}
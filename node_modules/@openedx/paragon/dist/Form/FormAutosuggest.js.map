{"version":3,"file":"FormAutosuggest.js","names":["React","useEffect","useState","useRef","forwardRef","useImperativeHandle","PropTypes","v4","uuidv4","useIntl","requiredWhen","KeyboardArrowUp","KeyboardArrowDown","Icon","FormGroupContextProvider","useFormGroupContext","FormControl","FormControlFeedback","IconButton","Spinner","useArrowKeyNavigation","messages","FormAutosuggest","_ref","ref","children","arrowKeyNavigationSelector","ignoredArrowKeysNames","screenReaderText","value","isLoading","isValueRequired","valueRequiredErrorMessageText","isSelectionRequired","selectionRequiredErrorMessageText","hasCustomError","customErrorMessageText","onChange","helpMessage","props","intl","formControlRef","parentRef","selectors","ignoredKeys","isDropdownExpanded","setIsDropdownExpanded","isActive","setIsActive","hasValue","setHasValue","hasSelection","setHasSelection","displayValue","setDisplayValue","userProvidedText","dropdownItems","setDropdownItems","activeMenuItemId","setActiveMenuItemId","isValid","setIsValid","errorMessage","setErrorMessage","handleMenuItemFocus","menuItemId","collapseDropdown","handleItemSelect","e","onClick","selectedValue","currentTarget","getAttribute","selectedId","id","selectionValue","selectionId","getItems","strToFind","arguments","length","undefined","childrenOpt","Children","map","child","childChildren","rest","cloneElement","onFocus","filter","opt","toLowerCase","includes","expandDropdown","toggleDropdown","iconToggle","createElement","className","tabIndex","src","iconAs","size","variant","alt","formatMessage","iconButtonClosed","iconButtonOpened","enterControl","updateErrorStateAndErrorMessage","leaveControl","keyDownHandler","key","preventDefault","current","focus","handleDocumentClick","contains","target","document","addEventListener","removeEventListener","handleTextboxClick","handleTextInput","filteredItems","matchingDropdownItem","find","o","getControlProps","controlProps","controlId","isInvalid","toString","role","autoComplete","trailingElement","type","name","animation","defaultProps","floatingLabel","placeholder","readOnly","propTypes","string","arrayOf","bool","func","shape","node"],"sources":["../../src/Form/FormAutosuggest.jsx"],"sourcesContent":["import React, {\n  useEffect, useState, useRef, forwardRef, useImperativeHandle,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid';\nimport { useIntl } from 'react-intl';\nimport { requiredWhen } from '../utils/propTypes';\nimport { KeyboardArrowUp, KeyboardArrowDown } from '../../icons';\nimport Icon from '../Icon';\nimport { FormGroupContextProvider, useFormGroupContext } from './FormGroupContext';\nimport FormControl from './FormControl';\nimport FormControlFeedback from './FormControlFeedback';\nimport IconButton from '../IconButton';\nimport Spinner from '../Spinner';\nimport useArrowKeyNavigation from '../hooks/useArrowKeyNavigationHook';\nimport messages from './messages';\n\nconst FormAutosuggest = forwardRef(\n  (\n    {\n      children,\n      arrowKeyNavigationSelector,\n      ignoredArrowKeysNames,\n      screenReaderText,\n      value,\n      isLoading,\n      isValueRequired,\n      valueRequiredErrorMessageText,\n      isSelectionRequired,\n      selectionRequiredErrorMessageText,\n      hasCustomError,\n      customErrorMessageText,\n      onChange,\n      helpMessage,\n      ...props\n    },\n    ref,\n  ) => {\n    const intl = useIntl();\n    const formControlRef = useRef();\n    const parentRef = useArrowKeyNavigation({\n      selectors: arrowKeyNavigationSelector,\n      ignoredKeys: ignoredArrowKeysNames,\n    });\n    const [isDropdownExpanded, setIsDropdownExpanded] = useState(false);\n    const [isActive, setIsActive] = useState(false);\n    const [hasValue, setHasValue] = useState(false);\n    const [hasSelection, setHasSelection] = useState(false);\n    const [displayValue, setDisplayValue] = useState(value?.userProvidedText || '');\n    const [dropdownItems, setDropdownItems] = useState([]);\n    const [activeMenuItemId, setActiveMenuItemId] = useState(null);\n    const [isValid, setIsValid] = useState(true);\n    const [errorMessage, setErrorMessage] = useState('');\n\n    const handleMenuItemFocus = (menuItemId) => {\n      setActiveMenuItemId(menuItemId);\n    };\n\n    const collapseDropdown = () => {\n      setDropdownItems([]);\n      setIsDropdownExpanded(false);\n      setActiveMenuItemId(null);\n    };\n\n    const handleItemSelect = (e, onClick) => {\n      const selectedValue = e.currentTarget.getAttribute('data-value');\n      const selectedId = e.currentTarget.id;\n\n      setHasValue(true);\n      setHasSelection(true);\n      setDisplayValue(selectedValue);\n\n      if (onChange && (!value || (value && selectedValue !== value.selectionValue))) {\n        onChange({\n          userProvidedText: selectedValue,\n          selectionValue: selectedValue,\n          selectionId: selectedId,\n        });\n      }\n\n      collapseDropdown();\n\n      if (onClick) {\n        onClick(e);\n      }\n    };\n\n    function getItems(strToFind = '') {\n      let childrenOpt = React.Children.map(children, (child) => {\n        const { children: childChildren, onClick, ...rest } = child.props;\n        const menuItemId = child.props.id ?? uuidv4();\n\n        return React.cloneElement(child, {\n          ...rest,\n          children: childChildren,\n          'data-value': childChildren,\n          onClick: (e) => handleItemSelect(e, onClick),\n          id: menuItemId,\n          onFocus: () => handleMenuItemFocus(menuItemId),\n        });\n      });\n\n      if (strToFind.length > 0) {\n        childrenOpt = childrenOpt\n          .filter((opt) => (opt.props.children.toLowerCase().includes(strToFind.toLowerCase())));\n      }\n\n      return childrenOpt;\n    }\n\n    const expandDropdown = () => {\n      setDropdownItems(getItems(displayValue));\n      setIsValid(true);\n      setErrorMessage('');\n      setIsDropdownExpanded(true);\n    };\n\n    const toggleDropdown = () => {\n      if (isDropdownExpanded) {\n        collapseDropdown();\n      } else {\n        expandDropdown();\n      }\n    };\n\n    const iconToggle = (\n      <IconButton\n        className=\"pgn__form-autosuggest__icon-button\"\n        data-testid=\"autosuggest-iconbutton\"\n        tabIndex=\"-1\"\n        src={isDropdownExpanded ? KeyboardArrowUp : KeyboardArrowDown}\n        iconAs={Icon}\n        size=\"sm\"\n        variant=\"secondary\"\n        alt={isDropdownExpanded\n          ? intl.formatMessage(messages.iconButtonClosed)\n          : intl.formatMessage(messages.iconButtonOpened)}\n        onClick={toggleDropdown}\n      />\n    );\n\n    const enterControl = () => {\n      setIsActive(true);\n    };\n\n    const updateErrorStateAndErrorMessage = () => {\n      if (hasCustomError) {\n        setIsValid(false);\n        setErrorMessage(customErrorMessageText);\n        return;\n      }\n\n      if (isValueRequired && !hasValue) {\n        setIsValid(false);\n        setErrorMessage(valueRequiredErrorMessageText);\n        return;\n      }\n\n      if (hasValue && isSelectionRequired && !hasSelection) {\n        setIsValid(false);\n        setErrorMessage(selectionRequiredErrorMessageText);\n        return;\n      }\n\n      setIsValid(true);\n      setErrorMessage('');\n    };\n\n    useImperativeHandle(ref, () => ({\n      // expose updateErrorStateAndErrorMessage so consumers can trigger validation\n      // when changing the value of the control externally\n      updateErrorStateAndErrorMessage,\n    }));\n\n    const leaveControl = () => {\n      setIsActive(false);\n      collapseDropdown();\n      updateErrorStateAndErrorMessage();\n    };\n\n    const keyDownHandler = e => {\n      if (!isActive) {\n        return;\n      }\n\n      if (e.key === 'Escape') {\n        e.preventDefault();\n\n        if (formControlRef) {\n          formControlRef.current.focus();\n        }\n\n        collapseDropdown();\n        return;\n      }\n\n      if (e.key === 'Tab') {\n        leaveControl();\n      }\n    };\n\n    const handleDocumentClick = (e) => {\n      if (parentRef.current && !parentRef.current.contains(e.target) && isActive) {\n        leaveControl();\n      }\n    };\n\n    useEffect(() => {\n      document.addEventListener('keydown', keyDownHandler);\n      document.addEventListener('click', handleDocumentClick, true);\n\n      return () => {\n        document.removeEventListener('click', handleDocumentClick, true);\n        document.removeEventListener('keydown', keyDownHandler);\n      };\n    });\n\n    useEffect(() => {\n      setDisplayValue(value ? value.userProvidedText ?? '' : '');\n      setHasValue(!!value && !!value.userProvidedText);\n      setHasSelection(!!value && !!value.selectionValue);\n    }, [value]);\n\n    const handleTextboxClick = () => {\n      expandDropdown();\n    };\n\n    const handleTextInput = (e) => {\n      const userProvidedText = e.target.value;\n\n      // If the user has removed all text from the textbox\n      if (!userProvidedText.length) {\n      // reset to a \"no text, nothing selected\" state\n        setDisplayValue('');\n        setHasValue(false);\n        setHasSelection(false);\n\n        // clear and close the dropdown\n        setDropdownItems([]);\n        collapseDropdown();\n\n        // if the consumer has provided an onChange handler\n        if (onChange) {\n        // send a default empty object\n          onChange({\n            userProvidedText: '',\n            selectionValue: '',\n            selectionId: '',\n          });\n        }\n        return;\n      }\n\n      // the user has entered text, we have a value\n      setHasValue(true);\n\n      // filter dropdown based on entered text\n      const filteredItems = getItems(userProvidedText);\n      setDropdownItems(filteredItems);\n\n      // check for matches in the dropdown\n      const matchingDropdownItem = filteredItems.find((o) => (\n        o.props.children.toLowerCase() === userProvidedText.toLowerCase()\n      ));\n\n      // if we didn't find a match\n      if (!matchingDropdownItem) {\n      // no match means no selection\n        setHasSelection(false);\n\n        // set the text in the state\n        setDisplayValue(userProvidedText);\n\n        // if the consumer has provided an onChange handler\n        if (onChange) {\n        // send an object with the user provided text only\n          onChange({\n            userProvidedText,\n            selectionValue: '',\n            selectionId: '',\n          });\n        }\n        return;\n      }\n\n      // we found a match, we have a selection!\n      setHasSelection(true);\n\n      // set the display value based on the item in the dropdown\n      // this matters because we match case insensitively\n      setDisplayValue(matchingDropdownItem.props.children);\n\n      // if the consumer has provided an onChange handler\n      if (onChange) {\n      // send an object with the selected item values\n        onChange({\n          userProvidedText: matchingDropdownItem.props.children,\n          selectionValue: matchingDropdownItem.props.children,\n          selectionId: matchingDropdownItem.props.id,\n        });\n      }\n    };\n\n    const { getControlProps } = useFormGroupContext();\n    const controlProps = getControlProps(props);\n\n    return (\n      <div className=\"pgn__form-autosuggest__wrapper\" ref={parentRef} onFocus={enterControl}>\n        <div aria-live=\"assertive\" className=\"sr-only\" data-testid=\"autosuggest-screen-reader-options-count\">\n          {`${dropdownItems.length} options found`}\n        </div>\n        <FormGroupContextProvider\n          controlId={controlProps.id}\n          isInvalid={!isValid}\n        >\n          <FormControl\n            ref={formControlRef}\n            aria-expanded={(dropdownItems.length > 0).toString()}\n            aria-owns=\"pgn__form-autosuggest__dropdown-box\"\n            role=\"combobox\"\n            aria-autocomplete=\"list\"\n            autoComplete=\"off\"\n            value={displayValue}\n            aria-invalid={errorMessage}\n            aria-activedescendant={activeMenuItemId}\n            onChange={handleTextInput}\n            onClick={handleTextboxClick}\n            trailingElement={iconToggle}\n            data-testid=\"autosuggest-textbox-input\"\n            {...controlProps}\n          />\n\n          {helpMessage && isValid && (\n          <FormControlFeedback type=\"default\">\n            {helpMessage}\n          </FormControlFeedback>\n          )}\n\n          {!isValid && (\n          <FormControlFeedback type=\"invalid\" feedback-for={controlProps.name}>\n            {errorMessage}\n          </FormControlFeedback>\n          )}\n        </FormGroupContextProvider>\n        <ul\n          id=\"pgn__form-autosuggest__dropdown-box\"\n          className=\"pgn__form-autosuggest__dropdown\"\n          role=\"listbox\"\n        >\n          {isLoading ? (\n            <div className=\"pgn__form-autosuggest__dropdown-loading\">\n              <Spinner\n                animation=\"border\"\n                variant=\"dark\"\n                screenReaderText={screenReaderText}\n                data-testid=\"autosuggest-loading-spinner\"\n              />\n            </div>\n          ) : dropdownItems.length > 0 && dropdownItems}\n        </ul>\n      </div>\n    );\n  },\n);\n\nFormAutosuggest.defaultProps = {\n  arrowKeyNavigationSelector: 'a:not(:disabled),li:not(:disabled, .btn-icon),input:not(:disabled)',\n  ignoredArrowKeysNames: ['ArrowRight', 'ArrowLeft'],\n  isLoading: false,\n  className: null,\n  floatingLabel: null,\n  onChange: null,\n  helpMessage: '',\n  placeholder: '',\n  value: null,\n  isValueRequired: false,\n  valueRequiredErrorMessageText: null,\n  isSelectionRequired: false,\n  selectionRequiredErrorMessageText: null,\n  hasCustomError: false,\n  customErrorMessageText: null,\n  readOnly: false,\n  children: null,\n  name: 'form-autosuggest',\n  screenReaderText: 'loading',\n};\n\nFormAutosuggest.propTypes = {\n  /**\n   * Specifies the CSS selector string that indicates to which elements\n   * the user can navigate using the arrow keys\n  */\n  arrowKeyNavigationSelector: PropTypes.string,\n  /** Specifies ignored hook keys. */\n  ignoredArrowKeysNames: PropTypes.arrayOf(PropTypes.string),\n  /** Specifies loading state. */\n  isLoading: PropTypes.bool,\n  /** Specifies class name to append to the base element. */\n  className: PropTypes.string,\n  /** Specifies floating label to display for the input component. */\n  floatingLabel: PropTypes.string,\n  /** Specifies onChange event handler. */\n  onChange: PropTypes.func,\n  /** Specifies help information for the user. */\n  helpMessage: PropTypes.string,\n  /** Specifies the placeholder text for the input. */\n  placeholder: PropTypes.string,\n  /** Specifies values for the input. */\n  value: PropTypes.shape({\n    userProvidedText: PropTypes.string,\n    selectionValue: PropTypes.string,\n    selectionId: PropTypes.string,\n  }),\n  /** Specifies if empty values trigger an error state */\n  isValueRequired: PropTypes.bool,\n  /** Informs user they must input a value. */\n  valueRequiredErrorMessageText: requiredWhen(PropTypes.string, 'isValueRequired'),\n  /** Specifies if freeform values trigger an error state */\n  isSelectionRequired: PropTypes.bool,\n  /** Informs user they must make a selection. */\n  selectionRequiredErrorMessageText: requiredWhen(PropTypes.string, 'isSelectionRequired'),\n  /** Specifies the control is in a consumer provided error state */\n  hasCustomError: PropTypes.bool,\n  /** Informs user of other errors. */\n  customErrorMessageText: requiredWhen(PropTypes.string, 'hasCustomError'),\n  /** Specifies the name of the base input element. */\n  name: PropTypes.string,\n  /** Selected list item is read-only. */\n  readOnly: PropTypes.bool,\n  /** Specifies the content of the `FormAutosuggest`. */\n  children: PropTypes.node,\n  /** Specifies the screen reader text */\n  screenReaderText: PropTypes.string,\n};\n\nexport default FormAutosuggest;\n"],"mappings":"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","ignoreList":[]}
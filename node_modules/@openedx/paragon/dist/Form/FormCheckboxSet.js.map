{"version":3,"file":"FormCheckboxSet.js","names":["React","PropTypes","useFormGroupContext","FormCheckboxSetContextProvider","FormControlSet","FormCheckboxSet","_ref","children","name","value","defaultValue","isInline","onChange","onFocus","onBlur","props","getControlProps","useSetIsControlGroupEffect","controlProps","createElement","role","propTypes","node","isRequired","className","string","arrayOf","bool","func","defaultProps","undefined"],"sources":["../../src/Form/FormCheckboxSet.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useFormGroupContext } from './FormGroupContext';\nimport { FormCheckboxSetContextProvider } from './FormCheckboxSetContext';\nimport FormControlSet from './FormControlSet';\n\nfunction FormCheckboxSet({\n  children,\n  name,\n  value,\n  defaultValue,\n  isInline,\n  onChange,\n  onFocus,\n  onBlur,\n  ...props\n}) {\n  const { getControlProps, useSetIsControlGroupEffect } = useFormGroupContext();\n  useSetIsControlGroupEffect(true);\n  const controlProps = getControlProps(props);\n  return (\n    <FormCheckboxSetContextProvider\n      name={name}\n      value={value}\n      defaultValue={defaultValue}\n      onFocus={onFocus}\n      onBlur={onBlur}\n      onChange={onChange}\n    >\n      <FormControlSet role=\"group\" isInline={isInline} {...controlProps}>\n        {children}\n      </FormControlSet>\n    </FormCheckboxSetContextProvider>\n  );\n}\n\nFormCheckboxSet.propTypes = {\n  /** Specifies contents of the component. */\n  children: PropTypes.node.isRequired,\n  /** Specifies class name to append to the base element. */\n  className: PropTypes.string,\n  /** Specifies name for the component. */\n  name: PropTypes.string.isRequired,\n  /** Specifies values for the checkboxes. */\n  value: PropTypes.arrayOf(PropTypes.string),\n  /** Specifies default values for the checkboxes. */\n  defaultValue: PropTypes.arrayOf(PropTypes.string),\n  /** Specifies whether to display components with inline styling. */\n  isInline: PropTypes.bool,\n  /** Specifies onChange event handler. */\n  onChange: PropTypes.func,\n  /** Specifies onFocus event handler. */\n  onFocus: PropTypes.func,\n  /** Specifies onBlur event handler. */\n  onBlur: PropTypes.func,\n};\n\nFormCheckboxSet.defaultProps = {\n  className: undefined,\n  value: undefined,\n  defaultValue: undefined,\n  isInline: false,\n  onChange: undefined,\n  onFocus: undefined,\n  onBlur: undefined,\n};\n\nexport default FormCheckboxSet;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,mBAAmB,QAAQ,oBAAoB;AACxD,SAASC,8BAA8B,QAAQ,0BAA0B;AACzE,OAAOC,cAAc,MAAM,kBAAkB;AAE7C,SAASC,eAAeA,CAAAC,IAAA,EAUrB;EAAA,IAVsB;IACvBC,QAAQ;IACRC,IAAI;IACJC,KAAK;IACLC,YAAY;IACZC,QAAQ;IACRC,QAAQ;IACRC,OAAO;IACPC,MAAM;IACN,GAAGC;EACL,CAAC,GAAAT,IAAA;EACC,MAAM;IAAEU,eAAe;IAAEC;EAA2B,CAAC,GAAGf,mBAAmB,CAAC,CAAC;EAC7Ee,0BAA0B,CAAC,IAAI,CAAC;EAChC,MAAMC,YAAY,GAAGF,eAAe,CAACD,KAAK,CAAC;EAC3C,oBACEf,KAAA,CAAAmB,aAAA,CAAChB,8BAA8B;IAC7BK,IAAI,EAAEA,IAAK;IACXC,KAAK,EAAEA,KAAM;IACbC,YAAY,EAAEA,YAAa;IAC3BG,OAAO,EAAEA,OAAQ;IACjBC,MAAM,EAAEA,MAAO;IACfF,QAAQ,EAAEA;EAAS,gBAEnBZ,KAAA,CAAAmB,aAAA,CAACf,cAAc;IAACgB,IAAI,EAAC,OAAO;IAACT,QAAQ,EAAEA,QAAS;IAAA,GAAKO;EAAY,GAC9DX,QACa,CACc,CAAC;AAErC;AAEAF,eAAe,CAACgB,SAAS,GAAG;EAC1B;EACAd,QAAQ,EAAEN,SAAS,CAACqB,IAAI,CAACC,UAAU;EACnC;EACAC,SAAS,EAAEvB,SAAS,CAACwB,MAAM;EAC3B;EACAjB,IAAI,EAAEP,SAAS,CAACwB,MAAM,CAACF,UAAU;EACjC;EACAd,KAAK,EAAER,SAAS,CAACyB,OAAO,CAACzB,SAAS,CAACwB,MAAM,CAAC;EAC1C;EACAf,YAAY,EAAET,SAAS,CAACyB,OAAO,CAACzB,SAAS,CAACwB,MAAM,CAAC;EACjD;EACAd,QAAQ,EAAEV,SAAS,CAAC0B,IAAI;EACxB;EACAf,QAAQ,EAAEX,SAAS,CAAC2B,IAAI;EACxB;EACAf,OAAO,EAAEZ,SAAS,CAAC2B,IAAI;EACvB;EACAd,MAAM,EAAEb,SAAS,CAAC2B;AACpB,CAAC;AAEDvB,eAAe,CAACwB,YAAY,GAAG;EAC7BL,SAAS,EAAEM,SAAS;EACpBrB,KAAK,EAAEqB,SAAS;EAChBpB,YAAY,EAAEoB,SAAS;EACvBnB,QAAQ,EAAE,KAAK;EACfC,QAAQ,EAAEkB,SAAS;EACnBjB,OAAO,EAAEiB,SAAS;EAClBhB,MAAM,EAAEgB;AACV,CAAC;AAED,eAAezB,eAAe","ignoreList":[]}
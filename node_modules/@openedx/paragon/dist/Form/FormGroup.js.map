{"version":3,"file":"FormGroup.js","names":["React","PropTypes","classNames","FormGroupContextProvider","FormGroup","_ref","children","controlId","isInvalid","isValid","size","as","props","createElement","className","SIZE_CHOICES","propTypes","node","isRequired","string","elementType","bool","oneOf"],"sources":["../../src/Form/FormGroup.tsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { FormGroupContextProvider } from './FormGroupContext';\nimport { FORM_CONTROL_SIZES } from './constants';\n\ninterface Props<As extends React.ElementType> {\n  /** Specifies contents of the component. */\n  children: React.ReactNode;\n  /** Specifies class name to append to the base element. */\n  className?: string;\n  /** Specifies base element for the component. */\n  as?: As;\n  /** Specifies id to use in the group, it will be used as `htmlFor` in `FormLabel` and as `id` in input components.\n   *  Will be autogenerated if none is supplied. */\n  controlId?: string;\n  /** Specifies whether to display components in invalid state, this affects styling. */\n  isInvalid?: boolean;\n  /** Specifies whether to display components in valid state, this affects styling. */\n  isValid?: boolean;\n  /** Specifies size for the component. */\n  size?: typeof FORM_CONTROL_SIZES.SMALL | typeof FORM_CONTROL_SIZES.LARGE;\n}\n\nfunction FormGroup<As extends React.ElementType = 'div'>({\n  children,\n  controlId,\n  isInvalid = false,\n  isValid = false,\n  size,\n  as,\n  ...props\n}: Props<As> & React.ComponentPropsWithoutRef<As>) {\n  return React.createElement(\n    as ?? 'div',\n    {\n      ...props,\n      className: classNames('pgn__form-group', props.className),\n    }, (\n      <FormGroupContextProvider\n        controlId={controlId}\n        isInvalid={isInvalid}\n        isValid={isValid}\n        size={size}\n      >\n        {children}\n      </FormGroupContextProvider>\n    ),\n  );\n}\n\nconst SIZE_CHOICES = ['sm', 'lg'];\n\nFormGroup.propTypes = {\n  /** Specifies contents of the component. */\n  children: PropTypes.node.isRequired,\n  /** Specifies class name to append to the base element. */\n  className: PropTypes.string,\n  /** Specifies base element for the component. */\n  as: PropTypes.elementType,\n  /** Specifies id to use in the group, it will be used as `htmlFor` in `FormLabel` and as `id` in input components.\n   *  Will be autogenerated if none is supplied. */\n  controlId: PropTypes.string,\n  /** Specifies whether to display components in invalid state, this affects styling. */\n  isInvalid: PropTypes.bool,\n  /** Specifies whether to display components in valid state, this affects styling. */\n  isValid: PropTypes.bool,\n  /** Specifies size for the component. */\n  size: PropTypes.oneOf(SIZE_CHOICES),\n};\n\nexport default FormGroup;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,UAAU,MAAM,YAAY;AACnC,SAASC,wBAAwB,QAAQ,oBAAoB;AAqB7D,SAASC,SAASA,CAAAC,IAAA,EAQiC;EAAA,IARM;IACvDC,QAAQ;IACRC,SAAS;IACTC,SAAS,GAAG,KAAK;IACjBC,OAAO,GAAG,KAAK;IACfC,IAAI;IACJC,EAAE;IACF,GAAGC;EAC2C,CAAC,GAAAP,IAAA;EAC/C,oBAAOL,KAAK,CAACa,aAAa,CACxBF,EAAE,IAAI,KAAK,EACX;IACE,GAAGC,KAAK;IACRE,SAAS,EAAEZ,UAAU,CAAC,iBAAiB,EAAEU,KAAK,CAACE,SAAS;EAC1D,CAAC,eACCd,KAAA,CAAAa,aAAA,CAACV,wBAAwB;IACvBI,SAAS,EAAEA,SAAU;IACrBC,SAAS,EAAEA,SAAU;IACrBC,OAAO,EAAEA,OAAQ;IACjBC,IAAI,EAAEA;EAAK,GAEVJ,QACuB,CAE9B,CAAC;AACH;AAEA,MAAMS,YAAY,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC;AAEjCX,SAAS,CAACY,SAAS,GAAG;EACpB;EACAV,QAAQ,EAAEL,SAAS,CAACgB,IAAI,CAACC,UAAU;EACnC;EACAJ,SAAS,EAAEb,SAAS,CAACkB,MAAM;EAC3B;EACAR,EAAE,EAAEV,SAAS,CAACmB,WAAW;EACzB;AACF;EACEb,SAAS,EAAEN,SAAS,CAACkB,MAAM;EAC3B;EACAX,SAAS,EAAEP,SAAS,CAACoB,IAAI;EACzB;EACAZ,OAAO,EAAER,SAAS,CAACoB,IAAI;EACvB;EACAX,IAAI,EAAET,SAAS,CAACqB,KAAK,CAACP,YAAY;AACpC,CAAC;AAED,eAAeX,SAAS","ignoreList":[]}
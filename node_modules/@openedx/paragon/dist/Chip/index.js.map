{"version":3,"file":"index.js","names":["React","PropTypes","classNames","requiredWhen","STYLE_VARIANTS","ChipIcon","CHIP_PGN_CLASS","Chip","forwardRef","_ref","ref","children","className","variant","iconBefore","iconBeforeAlt","iconAfter","iconAfterAlt","onIconBeforeClick","onIconAfterClick","disabled","isSelected","onClick","props","hasInteractiveIcons","isChipInteractive","interactionProps","onKeyPress","tabIndex","role","createElement","selected","interactive","src","alt","propTypes","node","isRequired","string","oneOf","bool","func","elementType","defaultProps","undefined","LIGHT"],"sources":["../../src/Chip/index.tsx"],"sourcesContent":["import React, { ForwardedRef, KeyboardEventHandler, MouseEventHandler } from 'react';\nimport PropTypes, { type Requireable } from 'prop-types';\nimport classNames from 'classnames';\n// @ts-ignore\nimport { requiredWhen } from '../utils/propTypes';\nimport { STYLE_VARIANTS } from './constants';\nimport ChipIcon from './ChipIcon';\n\nexport const CHIP_PGN_CLASS = 'pgn__chip';\n\nexport interface IChip {\n  children: React.ReactNode,\n  onClick?: KeyboardEventHandler & MouseEventHandler,\n  className?: string,\n  variant?: typeof STYLE_VARIANTS[keyof typeof STYLE_VARIANTS],\n  iconBefore?: React.ComponentType,\n  iconBeforeAlt?: string,\n  iconAfter?: React.ComponentType,\n  iconAfterAlt?: string,\n  onIconBeforeClick?: KeyboardEventHandler & MouseEventHandler,\n  onIconAfterClick?: KeyboardEventHandler & MouseEventHandler,\n  disabled?: boolean,\n  isSelected?: boolean,\n}\n\nconst Chip = React.forwardRef(({\n  children,\n  className,\n  variant,\n  iconBefore,\n  iconBeforeAlt,\n  iconAfter,\n  iconAfterAlt,\n  onIconBeforeClick,\n  onIconAfterClick,\n  disabled,\n  isSelected,\n  onClick,\n  ...props\n}: IChip, ref: ForwardedRef<HTMLDivElement>) => {\n  const hasInteractiveIcons = !!(onIconBeforeClick || onIconAfterClick);\n  const isChipInteractive = !hasInteractiveIcons && !!onClick;\n\n  const interactionProps = isChipInteractive ? {\n    onClick,\n    onKeyPress: onClick,\n    tabIndex: 0,\n    role: 'button',\n  } : {};\n\n  return (\n    <div\n      className={classNames(\n        CHIP_PGN_CLASS,\n        `pgn__chip-${variant}`,\n        className,\n        { disabled, selected: isSelected, interactive: isChipInteractive },\n      )}\n      ref={ref}\n      {...interactionProps}\n      {...props}\n    >\n      {iconBefore && (\n        <ChipIcon\n          className={`${CHIP_PGN_CLASS}__icon-before`}\n          src={iconBefore}\n          onClick={onIconBeforeClick}\n          alt={iconBeforeAlt}\n          variant={variant}\n          disabled={disabled}\n        />\n      )}\n      <div\n        className={classNames(`${CHIP_PGN_CLASS}__label`, {\n          'p-before': iconBefore,\n          'p-after': iconAfter,\n        })}\n      >\n        {children}\n      </div>\n      {iconAfter && (\n        <ChipIcon\n          className={`${CHIP_PGN_CLASS}__icon-after`}\n          src={iconAfter}\n          onClick={onIconAfterClick}\n          alt={iconAfterAlt}\n          variant={variant}\n          disabled={disabled}\n        />\n      )}\n    </div>\n  );\n});\n\nChip.propTypes = {\n  /** Specifies the content of the `Chip`. */\n  // @ts-ignore\n  children: PropTypes.node.isRequired,\n  /** Specifies an additional `className` to add to the base element. */\n  className: PropTypes.string,\n  /** The `Chip` style variant to use. */\n  variant: PropTypes.oneOf(['light', 'dark']),\n  /** Disables the `Chip`. */\n  disabled: PropTypes.bool,\n  /** Click handler for the whole Chip, has effect only when Chip does not have any interactive icons. */\n  onClick: PropTypes.func,\n  /**\n   * An icon component to render before the content.\n   * Example import of a Paragon icon component:\n   *\n   * `import { Check } from '@openedx/paragon/icons';`\n   */\n  iconBefore: PropTypes.elementType as Requireable<React.ComponentType>,\n  /** Specifies icon alt text. */\n  iconBeforeAlt: requiredWhen(PropTypes.string, ['iconBefore', 'onIconBeforeClick']),\n  /** A click handler for the `Chip` icon before. */\n  onIconBeforeClick: PropTypes.func,\n  /**\n   * An icon component to render before after the content.\n   * Example import of a Paragon icon component:\n   *\n   * `import { Check } from '@openedx/paragon/icons';`\n   */\n  iconAfter: PropTypes.elementType as Requireable<React.ComponentType>,\n  /** Specifies icon alt text. */\n  iconAfterAlt: requiredWhen(PropTypes.string, ['iconAfter', 'onIconAfterClick']),\n  /** A click handler for the `Chip` icon after. */\n  onIconAfterClick: PropTypes.func,\n  /** Indicates if `Chip` has been selected. */\n  isSelected: PropTypes.bool,\n};\n\nChip.defaultProps = {\n  className: undefined,\n  variant: STYLE_VARIANTS.LIGHT,\n  disabled: false,\n  onClick: undefined,\n  iconBefore: undefined,\n  iconAfter: undefined,\n  onIconBeforeClick: undefined,\n  onIconAfterClick: undefined,\n  isSelected: false,\n  iconAfterAlt: undefined,\n  iconBeforeAlt: undefined,\n};\n\nexport default Chip;\n"],"mappings":"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","ignoreList":[]}
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _jsYaml = require('js-yaml');

var _jsYaml2 = _interopRequireDefault(_jsYaml);

var _visitor = require('./visitor');

var _visitor2 = _interopRequireDefault(_visitor);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _postcss2.default.plugin('postcss-map', opts => {
  opts = Object.assign({
    maps: [],
    basePath: process.cwd(),
    defaultMap: 'config'
  }, opts);

  let filtered = [];
  let maps = Object.create(null);
  let paths = opts.maps.filter(map => {
    if (typeof map === 'string' && filtered.indexOf(map) === -1) {
      filtered.push(map);
      return true;
    }
    if (typeof map === 'object') {
      Object.assign(maps, map);
    }
  }).map(map => {
    return _path2.default.resolve(opts.basePath, map);
  });

  let promises = paths.map(map => {
    return new Promise((resolve, reject) => {
      (0, _fs.readFile)(map, 'utf-8', (err, data) => {
        if (err) {
          return reject(err);
        }
        resolve(data);
      });
    }).then(function (data) {
      let name = _path2.default.basename(map, _path2.default.extname(map));
      maps[name] = _jsYaml2.default.safeLoad(data, {
        filename: map
      });
    });
  });

  return css => {
    return Promise.all(promises).then(() => {
      const visitor = new _visitor2.default(opts, maps);

      css.walk(node => {
        if (node.type === 'decl') {
          return visitor.processDecl(node);
        }
        if (node.type === 'atrule') {
          return visitor.processAtRule(node);
        }
      });
    });
  };
});